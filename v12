//@version=5
indicator("Breakout Channel", shorttitle="EBC", overlay=true)

// Inputs
lengthInput = input.int(200, title="Length", minval=1, maxval=5000)
sourceInput = input.source(close, title="Source")

// Channel Settings
group1 = "Channel Settings"
useUpperDevInput = input.bool(true, title="Upper Deviation", inline="Upper Deviation", group=group1)
upperMultInput = input.float(2.0, title="", inline="Upper Deviation", group=group1)
useLowerDevInput = input.bool(true, title="Lower Deviation", inline="Lower Deviation", group=group1)
lowerMultInput = input.float(2.0, title="", inline="Lower Deviation", group=group1)

// Display Settings
group2 = "Display Settings"
showPearsonInput = input.bool(true, title="Show Pearson's R", group=group2)
extendLeftInput = input.bool(false, title="Extend Lines Left", group=group2)
extendRightInput = input.bool(true, title="Extend Lines Right", group=group2)
extendStyle = extend.none
if extendLeftInput and extendRightInput
    extendStyle := extend.both
else if extendLeftInput
    extendStyle := extend.left
else if extendRightInput
    extendStyle := extend.right

// Color Settings
group3 = "Color Settings"
colorUpper = input.color(color.new(color.blue, 85), title="Upper Channel Color", group=group3)
colorLower = input.color(color.new(color.red, 85), title="Lower Channel Color", group=group3)

// Function to calculate slope, average, and intercept
calcSlope(source, length) =>
    sumX = 0.0
    sumY = 0.0
    sumXSqr = 0.0
    sumXY = 0.0
    for i = 0 to length - 1 by 1
        val = source[i]
        per = i + 1.0
        sumX += per
        sumY += val
        sumXSqr += per * per
        sumXY += val * per
    slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
    average = sumY / length
    intercept = average - slope * sumX / length
    [slope, average, intercept]

// Function to calculate deviations and Pearson's R
calcDev(source, length, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    interceptVal = intercept
    for j = 0 to periods by 1
        highDiff = high[j] - interceptVal
        if highDiff > upDev
            upDev := highDiff
        lowDiff = interceptVal - low[j]
        if lowDiff > dnDev
            dnDev := lowDiff
        sourceVal = source[j]
        dxt = sourceVal - average
        dyt = interceptVal - daY
        diff = sourceVal - interceptVal
        stdDevAcc += diff * diff
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        interceptVal += slope
    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)
    [stdDev, pearsonR, upDev, dnDev]

// Main Logic
[slope, average, intercept] = calcSlope(sourceInput, lengthInput)
startPrice = intercept + slope * (lengthInput - 1)
endPrice = intercept

var line baseline = na
if na(baseline) and not na(startPrice)
    baseline := line.new(bar_index - lengthInput + 1, startPrice, bar_index, endPrice, width=1, extend=extendStyle, color=color.new(colorLower, 0))
else
    line.set_xy1(baseline, bar_index - lengthInput + 1, startPrice)
    line.set_xy2(baseline, bar_index, endPrice)

[stdDev, pearsonR, upDev, dnDev] = calcDev(sourceInput, lengthInput, slope, average, intercept)
upperStartPrice = startPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
upperEndPrice = endPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
lowerStartPrice = startPrice - (useLowerDevInput ? lowerMultInput * stdDev : dnDev)
lowerEndPrice = endPrice - (useLowerDevInput ? lowerMultInput * stdDev : dnDev)

var line upper = na
var line lower = na
if na(upper) and not na(upperStartPrice)
    upper := line.new(bar_index - lengthInput + 1, upperStartPrice, bar_index, upperEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(upper, bar_index - lengthInput + 1, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)

if na(lower) and not na(lowerStartPrice)
    lower := line.new(bar_index - lengthInput + 1, lowerStartPrice, bar_index, lowerEndPrice, width=1, extend=extendStyle, color=color.new(colorLower, 0))
else
    line.set_xy1(lower, bar_index - lengthInput + 1, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)

linefill.new(upper, baseline, color=colorUpper)
linefill.new(baseline, lower, color=colorLower)

float trend = math.sign(startPrice - endPrice)
alertcondition(sourceInput < line.get_price(upper, bar_index) or sourceInput < line.get_price(lower, bar_index), title='Regression Channel Exited', message="The price movement has exited the Regression Channel")
alertcondition(trend[1] == 0 and trend < 0, title='Switched to Uptrend', message='The Regression Channel trend switched from Downtrend to Uptrend')
alertcondition(trend[1] == 0 and trend > 0, title='Switched to Downtrend', message='The Regression Channel trend switched from Uptrend to Downtrend')

// Drawing arrows for price breakouts
var label breakoutLabel = na

// Delete the previous label if it exists
if not na(breakoutLabel)
    label.delete(breakoutLabel)

// Create a new label if a breakout occurs
if close > line.get_price(upper, bar_index)
    breakoutLabel := label.new(bar_index, low, "↓", color=color.new(color.red, 0), style=label.style_label_up, size=size.large, textcolor=color.white, yloc=yloc.belowbar)
if close < line.get_price(lower, bar_index)
    breakoutLabel := label.new(bar_index, high, "↑", color=color.new(color.green, 0), style=label.style_label_down, size=size.large, textcolor=color.white, yloc=yloc.abovebar)

// Pearson's R display
var label r = na
label.delete(r[1])
if showPearsonInput and not na(pearsonR)
    r := label.new(bar_index - lengthInput + 1, lowerStartPrice, str.tostring(pearsonR, "#.############"), color=color.new(color.white, 100), textcolor=color.new(colorUpper, 0), size=size.normal)
